// Kotlin and Android Gradle Plugin versions are managed in `settings.gradle` via
// the plugins {} block (pluginManagement). Avoid declaring `ext.kotlin_version`
// or classpath here to prevent version conflicts.

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

// Provide a minimal 'flutter' map for older plugin build scripts that
// reference `flutter.compileSdkVersion` (some published plugin versions
// expect this property to exist). This avoids evaluation-time failures
// like "Could not get unknown property 'flutter'..." when applying those
// plugin build.gradle files from the pub cache.
ext.flutter = [compileSdkVersion: 36, targetSdkVersion: 36]

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

// AGP 8.6+ requires library modules to declare a namespace. Some older plugin
// modules may not set a namespace; attempt to set a default one to avoid
// configuration-time failures (namespace not specified). This is a safe
// fallback for CI/local builds and mirrors logic used earlier to set compileSdk.
subprojects {
    plugins.withId('com.android.library') {
        // Some older plugin modules (in the pub cache) don't declare a namespace.
        // Attempt to set a safe default namespace in a defensive way.
        try {
            def hasNamespace = false
            try {
                hasNamespace = android.hasProperty('namespace') && (android.namespace != null && android.namespace.toString().trim().length() > 0)
            } catch (ignoredInner) {
                // property access may throw; treat as missing
                hasNamespace = false
            }

            if (!hasNamespace) {
                try {
                    android.namespace = "io.flutter.plugins.${project.name}"
                } catch (ignoredSet) {
                    // ignore if we can't set namespace on some plugin modules
                }
            }
        } catch (ignored) {
        }
    }
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.layout.buildDirectory
}

// Ensure Android library modules from plugins have a compileSdk set.
// Some plugins (published older versions) assume compileSdkVersion is set
// in the top-level project; set it here to avoid Gradle evaluation errors
// like "compileSdkVersion is not specified" when building on CI.
subprojects {
    // When Android plugins are applied to plugin modules, ensure they have
    // a compileSdk/targetSdk set. Use plugins.withId so we configure only
    // when the Android plugin is present, avoiding afterEvaluate on already
    // evaluated projects which can throw exceptions.
    plugins.withId('com.android.library') {
        try {
            android.compileSdk = 36
            if (android.defaultConfig != null) {
                android.defaultConfig.targetSdk = 36
            }
        } catch (ignored) {
        }
    }

    plugins.withId('com.android.application') {
        try {
            android.compileSdk = 36
            if (android.defaultConfig != null) {
                android.defaultConfig.targetSdk = 36
            }
        } catch (ignored) {
        }
    }
}
